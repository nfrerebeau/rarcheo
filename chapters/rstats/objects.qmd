# Structures de données {#sec-rstats-vector}

```{r, echo=FALSE}
source(here::here("common.R"))
```

Le vecteur (`vector`) est la structure de base de R, à partir de laquelle toutes les autres sont construites. Un vecteur est simplement un ensemble d'**éléments**.

Un vecteur peut être un vecteur atomique (@sec-rstats-atomic) (`atomic`), si tous ses éléments sont de même **type**, ou une liste (@sec-rstats-list) (`list`), si ses éléments sont de types différents (@tbl-r-data-structures). Un vecteur peut également avoir des **attributs** (@sec-rstats-attributes) (sorte de métadonnées).

| Dimensions | Objet homogène | Objet hétérogène |
|:-----------|:---------------|:-----------------|
| 1          | `atomic`       | `list`           |
| 2          | `matrix`       | `data.frame`     |
| $n$        | `array`        | -                |

: Structures de données des objets de R. {#tbl-r-data-structures}

## Vecteurs atomiques (`atomic`) {#sec-rstats-atomic}

Un vecteur atomique possède deux propriétés : son type et sa longueur (le nombre d'éléments qu'il contient ; @fig-r-atomic). Les quatre principaux types de R sont les suivants :

* `logical` : booléen.
* `integer` : nombre entier.
* `double` : nombre réel, avec ou sans partie décimale.
* `character` : chaîne de caractère.

```{r}
#| label: fig-r-atomic
#| echo: false
#| fig-width: 5
#| fig-height: 1
#| out-width: '33%'
#| fig-cap: "Un vecteur est un ensemble d'éléments de même type."
vec <- data.frame(x = 1:5, y = 1, z = "A")
ggplot2::ggplot(data = vec) +
  ggplot2::aes(x = x, y = y, fill = z, label = x) +
  ggplot2::geom_tile(colour = "white", linewidth = 2) +
  ggplot2::geom_text(size = 6) +
  ggplot2::theme_void() +
  ggplot2::theme(legend.position = "none") +
  ggplot2::scale_fill_manual(values = c(A = "#EECC66"))
```

### Création

Chacun de ces types possède une syntaxe particulière pour former des vecteur contenant un unique élément (scalaires) :

```{r}
x <- TRUE          # logical
x <- 1L            # integer
x <- 10.5          # double
x <- "archéologie" # character
```

* Un vecteur logique ne peut pendre que deux valeurs `TRUE` (vrai) ou `FALSE` (faux). `TRUE` et `FALSE` sont des mots réservés dans R : ils ne peuvent pas être utilisés comme identifiants pour nommer des variables ou des fonctions.
* Un nombre réel sans partie décimale sera toujours interprété comme étant de type `double` et non de type `integer`.
* Un vecteur de type `integer` s'écrit avec une syntaxe particulière : les nombres doivent être suivis d'un `L` pour les distinguer du type `double` et ne doivent pas avoir de partie décimale.
* Une chaîne de caractère doit toujours être encadrée par des guillemets simples (`'`) ou doubles (`"`). Si les guillemets sont manquantes, R l'interprétera comme un nom d'objet (et cherchera l'objet correspondant).

La fonction `c()` (*combine*) permet de construire des vecteurs longs :

```{r}
vec_log <- c(TRUE, FALSE, TRUE) # logical
vec_int <- c(1L, 2L, 3L)        # integer
vec_num <- c(1.2, 2.1, 3.2)     # double
vec_cha <- c("A", "B", "C")     # character
```

### Description

La fonction `typeof()` permet de connaitre le type d'un vecteur et la fonction `length()` sa longueur :

```{r}
typeof(vec_cha)

length(vec_cha)
```

La famille de fonctions `is.*()` permet de tester si un vecteur est d'un type particulier :

```{r}
is.logical(vec_log)

is.integer(vec_int)

is.double(vec_num)

is.character(vec_cha)
```

### Conversion {#sec-rstats-coerce}

Tous les éléments d'un vecteur atomique sont du même type. Lors de la combinaison d'éléments de types différents, R va réaliser une conversion implicite pour tenter de représenter tous les éléments du vecteur de manière raisonnable. Le type du vecteur final est alors déterminé par la hiérarchie `logical` < `integer` < `double` < `character`.

Un vecteur contenant au moins une chaîne de caractères sera donc de type `character` :

```{r}
x <- c(1, "B", 3)
typeof(x)

x <- c(TRUE, "B", TRUE)
typeof(x)
```

Un vecteur contenant au moins un nombre réel sera de type `double` (même s'il ne possède pas de partie décimale)^[La création d'un `integer` avec une partie décimale sera automatiquement converti en type `double` avec un avertissement.] :

```{r}
x <- c(1L, 2.1, 3L)
typeof(x)

x <- c(TRUE, 2.1, TRUE)
typeof(x)
```

Il est possible de convertir explicitement un vecteur d'un type à l'autre à l'aide de la famille de fonctions `as.*()` :

```{r}
as.integer(c(1.2, 2.1, 3.2))

as.numeric(c(TRUE, FALSE, TRUE))

as.character(c(1.2, 2.1, 3.2))
```

Les valeurs d'un vecteur numérique peuvent être converties en valeurs logiques : les valeurs égales à 0 deviennent `FALSE`, tout autre valeur non nulle devient `TRUE` :

```{r}
as.logical(c(1, 0, 3))
```

En cas de conversion impossible, des valeurs manquantes (@sec-rstats-missing) sont générées et un avertissement est retourné :

```{r, warning=TRUE}
as.numeric(c("A", "B", "C"))
```

### Attributs {#sec-rstats-attributes}

Les attributs d'un vecteur peuvent être vus comme des métadonnées : des données qui fournissent des informations sur les données du vecteur. 

Les attributs peuvent être spécifiés individuellement à l'aide de la fonction `attr()`, sous la forme de paires associant un nom et une valeur. Dans l'exemple suivant, deux attributs nommés `a` et `b` sont associés au vecteur `x` avec pour valeurs `"xyz"` et `1 2 3`, respectivement : 

```{r}
x <- 1:5

attr(x, "a") <- "xyz"
attr(x, "a")

attr(x, "b") <- 1:3
attr(x, "b")
```

:::{.callout-note}
La syntaxe particulière `attr(x, "a") <- "xyz"` indique qu'il s'agit d'une fonction de remplacement (@sec-rstats-subset). Ces fonctions particulières modifient en place l'objet correspondant au premier argument (`x`).
:::

L'utilisation des attributs requiert un peu de prudence, car à quelques exceptions près les attributs ne sont pas conservés lors d'opérations sur les vecteurs (comme lors de l'extraction de sous-ensembles ; @sec-rstats-subset). Il existe cependant deux attributs particuliers qui sont généralement conservés : les noms (`names`) et la dimension (`dim`, qui transforme un vecteur en matrice ; @sec-rstats-matrix).

Il est possible d'associer des noms aux différents éléments d'un vecteur, soit au moment de sa création, soit *a posteriori* avec la fonction `names()` (qui permet également d'extraire les noms) :

```{r}
# Un nom est associé à chaque élément
x <- c(a = 1, b = 2, c = 3, d = 4, e = 5)
x

# Les noms sont spécifiés à l'aide d'un vecteur
names(x) <- c("f", "g", "h", "i", "j")
x

# Extraire les noms des différents éléments
names(x)

# Supprimer les noms
names(x) <- NULL
names(x)

x
```

:::{.callout-note}
L'utilisation des attributs permet de créer des vecteurs particuliers, appelés `factor`, qui représentent des variables qualitatives (@sec-statistics) (nominales ou ordinales).
:::

## Listes (`list`) {#sec-rstats-list}

Une liste est un vecteur particulier, dont les éléments peuvent être de n'importe quel type (@fig-r-list). Les listes sont les objets les plus polyvalents de R, car nous pouvons y stocker n'importe quoi.

```{r}
#| label: fig-r-list
#| echo: false
#| fig-width: 5
#| fig-height: 1
#| out-width: '33%'
#| fig-cap: "Une liste est un vecteur dont les éléments peuvent être de différents types."
vec <- data.frame(x = 1:5, y = 1, z = c("A", "A", "B", "C", "B"))
ggplot2::ggplot(data = vec) +
  ggplot2::aes(x = x, y = y, fill = z, label = x) +
  ggplot2::geom_tile(colour = "white", linewidth = 2) +
  ggplot2::geom_text(size = 6) +
  ggplot2::theme_void() +
  ggplot2::theme(legend.position = "none") +
  ggplot2::scale_fill_manual(
    values = c(A = "#EECC66", B = "#EE99AA", C = "#6699CC")
  )
```

Une liste peut être créée avec avec la fonction `list()` :

```{r}
# Création d'une liste contenant 4 éléments
x <- list(
  TRUE,
  1L,
  c(1.2, 2.1),
  c("X", "Y", "Z")
)
x

# Une liste est un objet de type 'list'
typeof(x)

# Longueur de la liste (nombre d'éléments)
length(x)

# Longueur des différents éléments de la liste
lengths(x)

# Les éléments de la liste peuvent être nommés
names(x) <- c("a", "b", "c", "d")
x
```

Les listes permettent ainsi de créer et de manipuler des objets complexes, qui peuvent contenir d'autres listes (on parle alors de vecteurs récursifs) :

```{r}
x <- list(
  list(
    c(TRUE, FALSE),
    c("X", "Y", "Z")
  ), 
  c(1, 2)
)
x
```

La fonction `c()` permet de combiner plusieurs listes en une seule :

```{r}
x <- c(
  list(
    c(TRUE, FALSE),
    c("X", "Y", "Z")
  ), 
  list(1, 2)
)
x
```

Un vecteur atomique est converti en liste avant d'être combiné :

```{r}
x <- c(
  list(
    c(TRUE, FALSE),
    c("X", "Y", "Z")
  ), 
  c(1, 2)
)
x
```

## Matrices (`matrix` et `array`) {#sec-rstats-matrix}

Un vecteur peut être transformé en un tableau à deux (`matrix`) ou plusieurs (`array`) dimensions, en spécifiant l'attribut `dim`. Une matrice, au sens mathématique, est un tableau rectangulaire à deux dimensions : une matrice possède $m$ lignes et $n$ colonnes et contient $m \times n$ éléments du même type (@fig-r-matrix).

```{r}
#| label: fig-r-matrix
#| echo: false
#| fig-width: 5
#| fig-height: 5
#| out-width: '33%'
#| fig-cap: "Une matrice (a) est un tableau à deux dimensions dont tous les éléments sont de même type. Un array (b) peut être vu comme un empilement de matrices (formant ainsi un cube de données)."
#| fig-subcap: 
#|   - ""
#|   - ""
#| layout-ncol: 2
vec <- data.frame(x = rep(1:5, each = 4), y = -rep(1:4, times = 5), z = c("A"))
vec$i <- paste(vec$x, vec$y * -1, sep=",")
col <- data.frame(x = 1:5, y = 0, z = "X", i = "")
row <- data.frame(x = 0, y = 1:4 * -1, z = "X", i = "")

ggplot2::ggplot(data = rbind(vec, col, row)) +
  ggplot2::aes(x = x, y = y, fill = z, label = i) +
  ggplot2::geom_tile(colour = "white", linewidth = 2) +
  ggplot2::geom_text(size = 6) +
  ggplot2::theme_void() +
  ggplot2::theme(legend.position = "none") +
  ggplot2::scale_fill_manual(values = c(A = "#EECC66", X = "#997700"))

ggplot2::ggplot(data = rbind(vec, col, row)) +
  ggplot2::aes(fill = z, label = i) +
  ggplot2::geom_tile(
    ggplot2::aes(x = x, y = y), colour = "white", linewidth = 2
  ) +
  ggplot2::geom_tile(
    ggplot2::aes(x = x + 0.5, y = y -0.5), colour = "white", linewidth = 2
  ) +
  ggplot2::geom_tile(
    ggplot2::aes(x = x + 1, y = y - 1), colour = "white", linewidth = 2
  ) +
  # ggplot2::geom_text(ggplot2::aes(x = x + 1, y = y - 1), size = 6) +
  ggplot2::theme_void() +
  ggplot2::theme(legend.position = "none") +
  ggplot2::scale_fill_manual(values = c(A = "#EECC66", X = "#997700"))
```

```{r}
# Soit un vecteur contenant 12 éléments
x <- 1:12
x

# Le vecteur est transformé en une matrice de 2 lignes et 6 colonnes
dim(x) <- c(2, 6)
dim(x)
x
```

Les caractéristiques d'une matrice peuvent être retrouvées :

```{r}
typeof(x) # Type des éléments
length(x) # Nombre d'éléments (valeurs)
nrow(x)   # Nombre de lignes
ncol(x)   # Nombre de colonnes
```

La fonction `matrix()` permet de créer des matrices en spécifiant le nombre de lignes et de colonnes :

```{r}
# Par défaut, une matrice est remplie colonne par colonne
x <- matrix(1:12, nrow = 3, ncol = 4)
x

# Ce comportement peut être modifié
y <- matrix(1:12, nrow = 3, ncol = 4, byrow = TRUE)
y
```

Plusieurs matrices peuvent être combinées en une seule, par lignes (`rbind()`) ou par colonnes (`cbind()`) :

```{r}
# Combine les lignes de deux matrices
rbind(x, y)

# Combine les colonnes de deux matrices
cbind(x, y)
```

Enfin, il est possible de spécifier/extraire les noms de lignes et de colonnes avec les fonctions `rownames()` et `colnames()` ou avec la fonction `dimnames()` :

```{r}
rownames(x) <- c("X", "Y", "Z")
colnames(x) <- c("A", "B", "C", "D")
dimnames(x)

x

dimnames(y) <- list(c("X", "Y", "Z"), c("A", "B", "C", "D"))
rownames(y)
colnames(y)

y
```

## Tableaux de données (`data.frame`) {#sec-rstats-dataframe}

Le `data.frame` est probablement le concept le plus important de R : il permet de représenter un tableau de données rectangulaire dont les colonnes peuvent contenir des informations de différentes natures. Un `data.frame` est un cas particulier de `list` dont tous les éléments sont nommés et ont la même longueur : chaque élément correspond à une colonne du tableau^[Ainsi, la fonction `names()` est équivalente à `rownames()` et la fonction `length()` retourne le nombre de colonne du tableau (équivalent à `ncol()`).]. Chaque colonne d'un `data.frame` peut ainsi être d'un type différent (contrairement aux matrices dont tous les éléments sont du même type ; @fig-r-dataframe).

```{r}
#| label: fig-r-dataframe
#| echo: false
#| fig-width: 5
#| fig-height: 5
#| out-width: '33%'
#| fig-cap: "Un data.frame est un tableau à deux dimensions dont les colonnes peuvent être de différents types."
vec <- data.frame(x = rep(1:5, each = 4), y = -rep(1:4, times = 5), 
                  z = rep(c("A", "A", "B", "C", "B"), each = 4))
vec$i <- paste(vec$x, vec$y * -1, sep=",")
col <- data.frame(x = 1:5, y = 0, z = c("X", "X", "Y", "Z", "Y"), i = "")
row <- data.frame(x = 0, y = 1:4 * -1, z = NA_character_, i = "")

ggplot2::ggplot(data = rbind(vec, col, row)) +
  ggplot2::aes(x = x, y = y, fill = z, label = i) +
  ggplot2::geom_tile(colour = "white", linewidth = 2) +
  ggplot2::geom_text(size = 6) +
  ggplot2::theme_void() +
  ggplot2::theme(legend.position = "none") +
  ggplot2::scale_fill_manual(
    values = c(A = "#EECC66", B = "#EE99AA", C = "#6699CC",
               X = "#997700", Y = "#994455", Z = "#004488"),
    na.value = "#DDDDDD"
  )
```

Un tableau de données peut être créé avec la fonction `data.frame()` en spécifiant les différentes colonnes (si les arguments sont nommés, ils seront utilisés comme noms de colonne) :

```{r}
x <- data.frame(
  a = 1:3,
  b = c("x", "y", "z")
)
x
```

Un `data.frame` est une liste :

```{r}
typeof(x) # Type list
length(x) # Nombre d'éléments (colonnes)
```

Un `data.frame` est un tableau à deux dimensions :

```{r}
nrow(x) # Nombre de lignes
ncol(x) # Nombre de colonnes
```

Lignes et colonnes d'un `data.frame` sont nommées :

```{r}
rownames(x) # Noms de lignes
colnames(x) # Noms de colonnes
```

:::{.callout-note}
Sauf instruction spécifique lors de la création d'un `data.frame`, les noms de lignes sont générés automatiquement à partir d'une séquence de nombres entiers. Malgré les apparences, il s'agit bien de noms de lignes (de type `character`) et ils ne doivent pas être confondu avec les indices des lignes.
:::

Comme pour les matrices, il est possible de combiner les lignes ou les colonnes de plusieurs `data.frame` en un seul tableau de données avec `rbind()` et `cbind()`. Dans le cas de la combinaison de colonnes, il pourra être préférable de réaliser des jointures (@sec-data-join).

## Valeurs manquantes {#sec-rstats-missing
}