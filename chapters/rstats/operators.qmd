# Opérateurs mathématiques {#sec-rstats-operators}

```{r, echo=FALSE}
source(here::here("common.R"))
```

## Opérateurs arithmétiques

Les opérateurs arithmétiques (@tbl-operateurs-math) permettent de réaliser les opérations élémentaires :

```{r}
x <- 1
y <- 2

# Addition
x + y

# Soustraction
x - y

# Multiplication
x * y

# Exponentiation
x^y
```

| Opérateur | Description    |
|:---------:|:---------------|
| `+`       | addition       |
| `-`       | soustraction   |
| `*`       | multiplication |
| `/`       | division       |
| `^`       | exponentiation |

: Les principaux opérateurs arithmétiques de R. {#tbl-operateurs-math}

Une des particularités des R est de **vectoriser** de nombreuses opérations. Cela signifie que les opérations mathématiques sont réalisées élément par élément :

```{r}
x <- 1:5
y <- 6:10

# Addition des éléments de x et y, un à un
# Équivaut à réaliser 1 + 6, 2 + 7, 3 + 8, 4 + 9 et 5 + 10
x + y
```

Cet aspect est important dans le cas d'opérations sur des matrices (souvenez-vous, une matrice est simplement un vecteur avec un attribut de dimension et est remplie colonne par colonne) :

```{r}
# Une matrice de 5 lignes et 2 colonnes
x <- matrix(1:10, ncol = 2)
x

# Un vecteur de 10 éléments
y <- 1:10
y

# Les éléments de x et y sont additionnés un à un
x + y
```

Si deux vecteurs n'ont pas la même longueur, R va **recycler** le plus court des deux et le réutiliser autant que nécessaire. Si la taille de l'objet le plus long n'est pas multiple de la taille de l'objet le plus court, un avertissement sera également retourné :

```{r, warning=TRUE}
# Un vecteur de 5 éléments
i <- 1:5
i

# Les éléments de x et i sont additionnés un à un
# i est recyclé silencieusement
x + i

# Un vecteur de 3 éléments
j <- 1:3
j

# Les éléments de x et j sont additionnés un à un
# j est recyclé avec un message d'avertissement
x + j
```

## Opérateurs logiques

Les opérateurs logiques (@tbl-operateurs-logiques) permettent comparer des valeurs. Ces comparaisons se présentent sous la forme d'un test (la condition est-elle vraie ou fausse ?) et retournent donc un vecteur de type `logical` :

```{r}
# x contient un unique élément
x <- 1

# La valeur de x est-elle égale à 0 ?
x == 0

# La valeur de x est-elle différente de 1 ?
x != 1

# La valeur de x est-elle supérieure à 0 ?
x > 0

# La valeur de x est-elle inférieure à 2 ?
x < 2
```

| Opérateur | Comparaison           |
|:---------:|:----------------------|
| `>`       | strictement supérieur |
| `>=`      | supérieur ou égal     |
| `<`       | strictement inférieur |
| `<=`      | inférieur ou égal     |
| `==`      | égal                  |
| `!=`      | différent             |
| `&`       | ET                    |
| `|`       | OU                    |

: Les opérateurs logiques de R. {#tbl-operateurs-logiques}

Les opérateurs `&` (ET) et `|` (OU) permettent de combiner plusieurs conditions et de réaliser des comparaisons plus complexes. Dans ce cas, chaque condition est évaluée séparément, puis les résultats sont comparés :

```{r}
# La valeur de x est-elle comprise entre 0 et 2 ?
x > 0 & x < 2

# La valeur de x est-elle égale à 0 ou 1 ?
x == 0 | x == 1

# ET
TRUE & TRUE
TRUE & FALSE
FALSE & FALSE

# OU
TRUE | TRUE
TRUE | FALSE
FALSE | FALSE

# NEGATION
!TRUE
!FALSE
```

Souvenez-vous, R vectorise de nombreuses opérations. La comparaison de deux objets est réalisée élément par élément :

```{r}
x <- c(1, 4, 3, 6, 5)
y <- c(3, 2, 5, 4, 7)

# Comparaison des éléments de x et y, un à un
# Équivaut à tester si 1 < 3, 2 < 4, 3 < 5, 4 < 6 et 5 < 7
x < y

# Toutes les valeurs de x sont-elles inférieures à y ?
all(x < y)

# Au moins une des valeurs de x est-elle inférieure à y ?
any(x < y)
```

:::{.callout-warning}
Prenez garde aux valeurs manquantes ! Si une comparaison est réalisée avec une valeur manquante, le résultat sera une valeur manquante uniquement s'il est ambigu :

```{r}
TRUE & NA
FALSE & NA

TRUE | NA
FALSE | NA
```
:::

Utilisés conjointement avec `[` et `<-`, les opérateurs logiques permettent de filtrer (@sec-data-filter) et nettoyer (@sec-data-clean) facilement ses données :

```{r}
x <- 0:10
x

# Extraire les valeurs supérieures à 5
x[x > 5]

# Remplacer les 0 par des valeurs manquantes
x[x == 0] <- NA
x
```

:::{.callout-note}
Maintenant que vous maîtrisez les principaux opérateurs, nous pouvons nous livrer à une petite expérience. Si nous exécutons les instructions suivantes, il semble que R ne reconnaisse pas 0,9 comme étant égal à la somme de 0,6 et 0,3 :

```{r}
0.6 + 0.3

0.6 + 0.3 == 0.9
```

Ce comportement n'est pas propre à R, mais est lié à la façon dont les ordinateurs représentent les nombres réels. Les machines utilisent en effet fréquemment des nombres à virgule flottante que l'on peut considérer comme des représentations approximatives des nombres réels. Les nombres réels, comme nous l'avons appris à l'école, peuvent avoir une partie décimale infinie. Au contraire, les nombres à virgule flottante ont une partie décimale finie (approximativement limitée à 16 décimales selon la [norme utilisée par R](https://fr.wikipedia.org/wiki/IEEE_754)). L'opérateur `==` reconnait qu'il existe une différence entre les deux valeurs de notre exemple, conséquence de cet arrondi.

Il existe donc une fonction `all.equal()` qui teste la quasi-égalité :

```{r}
all.equal(0.6 + 0.3, 0.9)
```

Pour plus d'information, vous pouvez consulter la [foire aux questions de R](https://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-doesn_0027t-R-think-these-numbers-are-equal_003f).
:::
