# Prise en main {#sec-rstat}

Maintenant que nous avons établi les motivations principales justifiant l'apprentissage de R et son usage en archéologie, il est temps d'introduire certains termes et concepts clés qui apparaissent fréquemment dans ce livre. Se familiariser avec ces termes vous aidera à trouver votre chemin lorsque vous commencerez à utiliser R.

:::{.callout-tip}
L'apprentissage d'un programme à interface en ligne de commande tel que R peut paraître déroutant au premier abord, mais ne perdez pas de vue les points suivants :

* Vous n'avez pas besoin de connaître tout ce qu'il y a à savoir sur R pour l'utiliser de manière efficace. Si vous êtes bloqué, consultez la documentation et les nombreuses ressources librement accessibles en ligne.
* Il existe de nombreuses façons d'aborder un problème particulier avec R. Si votre code ne ressemble pas à celui d'un d'autre, mais qu'il fait ce que vous voulez qu'il fasse en un temps raisonnable et de manière robuste, alors le travail est fait.
* **Il y aura des moments où les choses seront un peu difficiles ou frustrantes.** Essayez d'accepter ces périodes comme faisant partie du processus d'apprentissage d'une nouvelle compétence : le temps et l'énergie que vous investissez maintenant seront rapidement rentabilisés.
:::

Jusque là, nous avons utilisé le mot "code" sans vraiment le définir. Le **code** désigne tout ce qui est écrit dans un langage de programmation, d'un simple mot à une fonction de plusieurs milliers de lignes. Un **script** est un fichier qui contient du code, les noms de fichiers de scripts R se terminent par l'extension `.R`. Vous pouvez ouvrir ces fichiers avec n'importe quel éditeur de texte. 

Le code contient souvent des **commentaires**, que vous pouvez reconnaître dans le langage R par un symbole `#` (dièse) en début de ligne. Le symbole `#` indique à l'interpréteur R d'ignorer tout ce qui se trouve à droite de ce symbole et de passer à la ligne de code suivante. Il n'y a pas de règles strictes sur le nombre de commentaires que vous devez inclure dans votre code, mais un bon point de départ serait une ligne de commentaire pour chaque 10 lignes ou section majeure de code. Les commentaires de code sont importants car ils vous aident, ainsi que d'autres personnes, à comprendre l'objectif du code. Les commentaires doivent expliquer le pourquoi, et non le comment (il suffit de lire le script pour cela) de votre code : ils doivent expliquer l'intention générale du code. Plus généralement, vos commentaires doivent vous dire ce que vous devrez savoir dans quelques semaines ou mois, lorsque vous reprendrez le travail après une pause et que vous ne vous souviendrez plus des détails. 

## Invite de commande {#sec-rstats-console}

R se présente sous la forme d'une [interface en ligne de commande](https://fr.wikipedia.org/wiki/Interface_en_ligne_de_commande), permettant de donner des instructions à l'ordinateur. Dans RStudio, cette interface est accessible dans l'onglet *Console*.

Lorsque R est en cours d'exécution, l'interface signifie qu'elle est prête à recevoir des instructions par une invite de commande (*prompt*) indiquée par un chevron `>`.

Il est alors possible d'entrer une **expression**, qui va être **évaluée** par R avant d'en retourner le résultat :

```{r}
1 + 1
```

Sans surprise, le résultat de l'addition est 2. R donne une information supplémentaire, le `[1]` devant `2` précise qu'il s'agit du premier (dans le cas présent, du seul) élément retourné. Certaines commandes peuvent retourner plusieurs valeurs. Par exemple, l'opérateur `:` (deux-points) permet de construire des séquences (@sec-cheat-sequence) de nombres entiers :

```{r}
0:100
```

La commande `0:100` retourne 101 valeurs qui sont affichées sur plusieurs lignes : le nombre entre crochet indique l'**indice**^[Contrairement à [Python](https://www.python.org/), dans R les indices commencent à 1 et non à 0.] de la valeur par laquelle débute chacune des lignes (la deuxième ligne commence par la 17^e^ valeur, etc.).

Si une commande incomplète est transmise, l'invite de commande signale par un `+` que la suite des instructions peut être saisie sur plusieurs lignes : 

```{r}
1 -
1
```

:::{.callout-tip}
Il est possible d'interrompre la saisie ou d'annuler une commande avec `ctrl/cmd + c`.
:::

Si une commande erronée est transmise, R s'interrompt et retourne un message d'erreur (plus ou moins explicite) :

```{r, error=TRUE}
x
```

:::{.callout-tip}
Il est possible de naviguer dans l'historique des commandes précédemment exécutées à l'aide des flèches `haut` et `bas` du clavier.
:::

## Objets {#sec-rstats-objects}

Il est possible d'associer un nom à une valeur et ainsi de créer des **variables** (au sens informatique) qui peuvent ensuite être appelées dans l'invite de commande. Une variables n'est rien d'autre qu'un emplacement de la mémoire de l'ordinateur, réservé pour stocker une valeur.

Cette **affectation** (ou assignation, par anglicisme) est réalisée à l'aide de l'opérateur `<-` (flèche) :

```{r}
## Le résultat d'une affection n'est pas affiché dans la console
x <- 1

## Avec des parenthèses, le résultat est affiché dans la console
(x <- 1)

x
```

Il est possible de copier une variable :

```{r}
y <- x
y
```

Une fois copié, il n'existe aucun lien entre l'objet initial et sa copie. Dans l'exemple précédent, si `x` est modifié après avoir été copié dans `y`, la valeur de `y` ne sera pas modifiée.

Il est possible d'affecter plusieurs variables en même temps :

```{r}
i <- j <- 1
```

Les variables ainsi crées peuvent être réutilisées :

```{r}
x + 1
i + j
```

La réutilisation d'un nom de variable existant entraîne le remplacement de la valeur précédente (sans avertissement) :

```{r}
i <- 1
i

i <- 2
i
```

:::{.callout-important}
* Un nom de variable peut uniquement être composé de lettres, de chiffres et des caractères `.` ou `_`.
* Un nom de variable doit toujours commencer par une lettre (ou par un point suivi d'une lettre).
* Les noms de variables sont sensibles à la casse (`x` et `X` sont deux variables différentes).
* Il existe des mots réservés qui ne peuvent être utilisés comme nom de variable.
:::

Dans R les variables stockent des **objets**^[En informatique, un objet est une représentation d'une entité du monde réel et de ses attributs, auxquels sont associés des traitements particuliers.]. Ainsi, le code `x <- 1` peut se lire "créer un objet nommé *x* dont la valeur est 1"^[Il s'agit cependant d'une simplification, voir la section "[Binding basics](https://adv-r.hadley.nz/names-values.html#binding-basics)" dans @wickham2019 pour plus de détails.].

Un objet possède un type et une structure de données particulière. Le type d'un objet est lié au type d'information qu'il contient et à la façon dont il est stocké dans la mémoire^[Votre système d'exploitation alloue la mémoire en fonction du type de donnée et décide de ce qui peut être stocké dans la mémoire réservée lors de la création d'une variable.]. La structure de données d'un objet correspond à la manière dont sont organisées les données.

Ainsi, pour conserver les résultats d'un calcul, nous affectons la sortie d'une instruction à une variable. Ce processus d'affectation enregistre la sortie dans notre **environnement** afin qu'elle soit disponible pour une réutilisation ultérieure dans notre session. L'affectation n'enregistre pas les données dans un fichier qui peut être utilisé ailleurs : l'export de données est un processus distinct que nous aborderons plus tard (@sec-data-import).

## Environnements {#sec-rstats-environments}

Résumé simplement, les environnements peuvent être vus comme des collections d'objet (variables, fonctions, etc.) : c'est l'endroit où R stocke les résultats des calculs. Lors du lancement de R, un environnement est créé et toute variable définie au cours de la session de travail se trouvera dans cet environnement. Par exemple, si vous avez exécuté un script qui lit une feuille de calcul et la stocke en tant qu'objet R, cet objet sera répertorié dans l'environnement courant.

Les fonctions `ls()` et `rm()` permettent respectivement de lister et de supprimer les objets qui se trouvent dans un environnement spécifique :

``` r
## Assigner des valeurs aux variables x et y
x <- 1
y <- 2

## Lister les objets présents dans l'environnement
ls()
#> [1] "x" "y"

## Supprimer l'objet x de l'environnement
## (action non réversible !)
rm(x)

ls()
#> [1] "y"
```

Les environnements sont un concept de programmation avancé qui dépasse le cadre de cet ouvrage, une explication détaillée en est donnée par @wickham2019.

:::{.callout-tip}
Si vous utilisez RStudio (@sec-setup-rstudio), l'onglet *Environment* répertorie les objets qui sont actuellement disponibles dans votre session de travail. Cet onglet est utile car il permet d'obtenir d'un coup d'œil des informations de base sur la dimension des objets que vous créez (par exemple, le nombre de lignes et de colonnes), de vérifier rapidement le résultat de vos calculs et de voir si votre code fonctionne comme prévu. 
:::

## Fonctions {#sec-rstats-functions}

Il existe des objets particuliers, qui permettent d'agir sur d'autres objets : les **fonctions**. Une fonction désigne un bloc de code qui exécute des instructions pour effectuer une tâche précise. Par exemple, la fonction `mean()` permet de calculer la moyenne d'un ensemble de nombres. Dans ce livre, vous serez toujours en mesure de reconnaître une fonction car elle sera toujours suivie d'une paire de parenthèses, avec souvent du code entre les parenthèses. Une fonction est un moyen efficace d'organiser le code, car une seule fonction peut entraîner l'exécution de centaines de lignes de code pour produire un résultat. Plutôt que d'exécuter ces centaines de lignes, une par une, encore et encore, nous pouvons simplement taper le nom de la fonction qui les invoque et nous épargner beaucoup de saisies. Minimiser la saisie est une bonne chose : cela permet de gagner du temps et de réduire les risques d'erreurs en faisant des fautes de frappe.

Les fonctions peuvent accepter une ou plusieurs valeurs (ou objets) en entrée, appelés **arguments**, et retournent un objet au terme de leur exécution. Les arguments permettent de modifier le comportement d'une fonction. 

R fournit de très nombreuses fonctions, mais pour réaliser des taches très spécifiques il est possible d'écrire ses propres fonctions (@sec-rstats-functions-custom) ou d'installer des packages (@sec-rstats-packages) supplémentaires.

Par exemple, la fonction `round()` permet d'arrondir une valeur numérique au nombre de décimales spécifié. Par défaut, la fonction `round()` réalise un arrondi à zéro chiffre après la virgule :

```{r}
round(3.141593)
```

La fonction `args()` permet de connaitre les différents arguments d'une fonction et les valeurs par défaut qui peuvent leur être associées :

```{r}
args(round)
```

La fonction `round()` accepte ainsi deux arguments, la valeur à arrondir et le nombre de décimales à conserver (0 par défaut).

:::{.callout-note}
Les arguments qui possèdent une valeur par défaut sont des **arguments facultatifs** : ils peuvent être omis lorsque la fonction est appelée (la valeur par défaut sera utilisée). À l'inverse, les arguments sans valeurs par défaut doivent être spécifiés : ce sont des **arguments obligatoires**.
:::

Les différents arguments d'une fonction sont séparés par une virgule et sont nommés. Lors de l'appel d'une fonction, si les arguments ne sont pas spécifiés par leur nom, R va associer les valeurs correspondantes dans l'ordre. Dans l'exemple suivant, la valeur `2` est associée au second argument (`digits`) :

```{r}
round(3.141593, 2)
```

Pour éviter les erreurs et pour faciliter la lecture du code (@sec-style-function), dans un appel de fonction, spécifiez toujours les arguments par leur nom (à l'exception du premier argument). Les arguments obligatoires doivent être placés en premier, suivis des arguments facultatifs :

```{r}
round(3.141593, digits = 2)
```

:::{.callout-tip}
Le nom des arguments d'une fonction, leurs rôles et leurs éventuelles valeurs par défaut sont détaillés dans l'aide (@sec-rstats-help).
:::

Par exemple, on peut vouloir calculer la moyenne des longueurs d'un assemblage d'artefacts. Cet exemple montre l'utilisation de deux fonctions simples pour calculer une valeur moyenne :

```{r}
x <- c(4, 7, 12) # Combine la longueur de trois artefacts
y <- mean(x)     # Calcule la longueur moyenne
```

La fonction `c()` permet de combiner ("c" pour combiner) nos mesures d'artefacts dans un objet appelé vecteur (@sec-rstats-atomic). Un vecteur est une séquence simple d'éléments du même type. Dans notre exemple, tous les éléments sont des nombres. Il existe deux autres vecteurs couramment utilisés dans R : un vecteur de chaînes de caractères où tous les éléments peuvent être des lettres ou des mots, et un vecteur logique où tous les éléments sont des constantes logiques, soit `TRUE` (vrai) ou `FALSE` (faux). Le vecteur est un type de données fondamental en R que nous utiliserons très souvent. Dans l'exemple ci-dessus, nous avons stocké le résultat de la fonction `c()` dans un objet que nous appelons `x` (nous pouvons l'appeler comme bon nous semble, et nous n'avons pas besoin de créer `x` à l'avance). La deuxième ligne de code permet de calculer la moyenne de 4, 7 et 12 (c'est-à-dire $(4 + 7 + 12)/3$), puis d'affecter, ou stocker, le résultat dans un objet appelé `y`. Nous pouvons ensuite utiliser `x` et `y` plus tard dans notre flux de travail pour d'autres tâches. C'est utile car cela signifie que nous n'avons pas à recalculer la moyenne à plusieurs reprises.

Les fonctions, telles que `c()` et `mean()` dans l'exemple ci-dessus, sont au cœur du travail avec R, et expliquent en partie la grande polyvalence de R. Elles permettent de gagner beaucoup de temps en minimisant la saisie et le copier-coller, il est donc utile d'investir quelques efforts pour apprendre à utiliser les fonctions, et à écrire vos propres fonctions. 

## Packages {#sec-rstats-packages}
### Installer et utiliser des packages
Les fonctions sont organisées en **packages**, que vous pouvez télécharger pour étendre l'utilisation de R. Lors d'une première installation de R, deux ensembles de packages contenant les fonctions (@sec-rstats-functions) fondamentales sont installés :

* Les packages essentiels : `base`, `compiler`, `datasets`, `graphics`, `grDevices`, `grid`, `methods`, `parallel`, `splines`, `stats`, `stats4`, `tcltk`, `tools`, `translations`, `utils`.
* Les packages recommandés : `boot`, `class`, `cluster`, `codetools`, `foreign`, `KernSmooth`, `lattice`, `MASS`, `Matrix`, `mgcv`, `nlme`, `nnet`, `rpart`, `spatial`, `survival`.

L'installation d'un package permet de bénéficier de fonctionnalités supplémentaires, généralement dédiées à une tâche bien spécifique. Pour ne pas se perdre dans la multitude de ressources disponibles, le CRAN propose des [répertoires de packages](https://cran.r-project.org/web/views/) par domaine (*Task Views*) pour faciliter le choix des packages pour une analyse spécifique. Il existe ainsi des répertoires pour les [sciences sociales](https://cran.r-project.org/web/views/SocialSciences.html), l'analyse de [données environnementales](https://cran.r-project.org/web/views/Environmetrics.html) ou encore l'analyse de [données spatiales](https://cran.r-project.org/web/views/Spatial.html). Pour l'archéologie, il existe une [*Task View* non officielle](https://github.com/benmarwick/ctv-archaeology), maintenue par Ben Marwick.

Lorsqu'un package est disponible sur le CRAN, il peut aisément être installé à l'aide de la fonction `install.packages()`^[`install.packages()` permet également d'installer des packages publiés sur d'autres dépôts que le CRAN, comme [Bioconductor](https://www.bioconductor.org/).]. Par exemple, si vous exécutez `install.packages("binford")`, vous allez télécharger automatiquement le package [*binford*](https://cran.r-project.org/package=binford) depuis le CRAN (vous devez être connecté à Internet) et l'installer dans votre bibliothèque. Le package *binford* contient les données de son livre de *Constructing Frames of Reference : An Analytical Method for Archaeological Theory Building Using Ethnographic and Environmental Data Sets* (2001).

Essayez vous-même en exécutant les commandes suivantes pour installer certains des packages que nous utiliserons dans les chapitres suivants. Vous ne devez utiliser `install.packages()` qu'une seule fois (par ordinateur et par utilisateur) : vous n'avez pas besoin de le faire à chaque nouvelle session de travail. Remarquez comment nous utilisons la fonction `c()` ici pour créer un vecteur de noms de packages (chaînes de caractères) sur lequel la fonction `install.packages()` peut travailler :

```{r, eval=FALSE}
# Installer un seul package
install.packages("folio")

# Installer plusieurs packages à la fois
pkg <- c("rmarkdown", "tinytext")
install.packages(pkg)
```

:::{.callout-tip}
La plupart des packages publiés sur le CRAN font l'objet de mises à jour régulières. Pour maintenir à jour les packages installés sur votre ordinateur, la fonction `old.packages()` permet de lister les packages pour lesquels il existe une nouvelle version et `update.packages()` permet de télécharger et d'installer les nouvelles versions.
:::

Installer un nouveau package est une condition nécessaire, mais pas suffisante, pour pouvoir l'utiliser. Au lancement, R ne charge pas tous les packages installés, mais uniquement les packages de base^[La liste des packages chargés par défaut au lancement de R peut être obtenue avec `getOption('defaultPackages')`.]. Dans l'exemple suivant, si on utilise la fonction `data()` pour charger le jeux de données `intcal20` du package *folio* sans que ce dernier soit chargé. R ne sait pas où chercher l'objet et retourne un avertissement :

```{r, warning=TRUE, cache=FALSE}
data(intcal20)
```

Lorsque R installe un package, il le télécharge dans votre bibliothèque. Vous devez utiliser la fonction `library()` pour mettre le contenu du package à la disposition de votre session R actuelle. Chaque fois que vous lancez R, vous devrez exécuter `library()` pour utiliser les fonctions des package que vous avez précédemment installés. Une bonne pratique consiste à placer les appels à la fonctions `library()` parmi les premières lignes de votre script, afin que les autres utilisateurs puissent rapidement voir quels paquets ils devront avoir pour exécuter votre code.

Il est ainsi nécessaire de charger un package à l'aide de la fonction `library()` avant de pouvoir l'utiliser^[Dans le cas présent, une alternative serait de spécifier l'argument `package` de la fonction `data()`.] :

```{r}
library("folio")
data(intcal20)
```

L'une des forces de R, la communauté dynamique de chercheurs-développeurs, est aussi l'une de ses faiblesses. En effet, cela signifie que certains packages sont mis à jour fréquemment, et d'autres non. Parfois, ces mises à jour peuvent modifier le fonctionnement de votre code, ou l'empêcher complètement de fonctionner. Nous aborderons des solutions détaillées à ce problème par la suite. Pour l'instant, nous noterons simplement que c'est une bonne pratique d'inclure la sortie de `sessionInfo()` dans les résultats de votre analyse, car elle vous indique les numéros de version spécifiques de tous les paquets utilisés. Cela signifie que s'il y a des changements drastiques dans certains des packages que vous utilisez au cours de la vie de votre projet, vous avez un enregistrement de la dernière version des packages qui a fonctionné pour vous.

:::{.callout-note}
## Note sur le tidyverse

Le [tidyverse](https://www.tidyverse.org/) est un ensemble de packages partageant "une philosophie de conception, une grammaire et des structures de données" dont les principes sont détaillés par @wickham2019b. Tout comme le tidyverse revendique un "parti pris" (*opinionated*), ce livre revendique un choix : celui de ne pas utiliser les packages du tidyverse (à l'exception de *ggplot2* ; @sec-ggplot2), malgré leur popularité au sein de la communauté des utilisateurs de R.

Ce choix repose sur un constat simple : l'usage de ces packages tend à considérablement complexifier l'apprentissage de R par les débutants et à les enfermer dans un écosystème particulier. Au contraire, l'utilisateur qui maîtrise les bases de R peut faire face à une multitudes de situations (il s'agit ici d'apprendre les bases d'un langage, plutôt que celles d'un dialecte particulier^[Voir @matloff2019 pour une discussion détaillée.]).

Ceci étant dit, le lecteur qui le souhaite trouvera dans [*Introduction à R et au tidyverse*](https://juba.github.io/tidyverse) [@barnier2021], [*R for Data Science*](https://r4ds.had.co.nz/) [@wickham2016] et [*STAT 545*](https://stat545.com/) [@bryan2020] une introduction à l'analyse de données avec les packages du tidyverse.
:::

### Limiter les dépendances {#sec-rstats-dependencies}

Si les packages de base de R offrent de nombreuses possibilités, il est courant d'avoir besoin de fonctionnalités supplémentaires au cours d'une étude. Pour une analyse spécifique, il est très probable qu'il existe déjà un ou plusieurs packages offrant les fonctionnalités recherchées et installable depuis le CRAN. Cette offre pléthorique a cependant un revers : à chaque package supplémentaire utilisé dans votre projet, vous augmentez le risque de voir apparaître des problèmes liés à ces dépendances^[Sur le sujet, voir les billets regroupés sur le site du [tinyverse](https://www.tinyverse.org/).].

Par exemple, [*FactoMineR*](http://factominer.free.fr/) est sans doute le package le plus utilisé pour l'analyse de données multivariées. *FactoMineR* possède `r length(tools::package_dependencies("FactoMineR")[[1]])` dépendances directes : d'autres packages dont il utilise les fonctionnalités. Cependant, chacune de ces dépendances est susceptible d'avoir elle même des dépendances, et ainsi de suite, si bien que *FactoMineR* a en réalité une longue chaîne de `r length(tools::package_dependencies("FactoMineR", recursive = TRUE)[[1]])` (!) dépendances (@fig-factominer-dependency).

```{r}
#| label: fig-factominer-dependency
#| echo: false
#| fig-width: 7
#| fig-height: 7
#| fig-cap: "Réseau des dépendances du package *FactoMineR* (hors packages de base). Les noms des packages ont été omis pour faciliter la lecture (*FactoMineR* est représenté par un triangle noir, les autres packages sont représentés par des points gris)."
facto_dep <- miniCRAN::makeDepGraph(
  pkg = "FactoMineR", 
  suggests = FALSE, 
  enhances = FALSE,
  includeBasePkgs = FALSE
)
# plot(facto_dep, main = "", vertex.size = 8, cex = 0.9)

facto_dep |> 
  tidygraph::as_tbl_graph() |> 
  ggraph::ggraph(layout = "stress") + 
  ggraph::geom_edge_link(
    mapping = ggplot2::aes(edge_colour = type),
    arrow = grid::arrow(length = grid::unit(2, "mm")),
    end_cap = ggraph::circle(3, "mm")
  ) +
  ggraph::geom_node_point(
    mapping = ggplot2::aes(
      color = name == "FactoMineR",
      shape = name == "FactoMineR"
    ),
    size = 5,
    show.legend = FALSE
  ) + 
  # ggraph::geom_node_text(
  #   mapping = ggplot2::aes(label = name),
  #   vjust = 0.4
  # ) +
  ggplot2::theme_void() +
  ggplot2::theme(legend.position = "bottom") +
  ggraph::scale_edge_color_manual(
    name = "Dependency",
    values = c(`Depends` = "#004488", `Imports` = "#BB5566", 
               `LinkingTo` = "#DDAA33")
  ) +
  ggplot2::scale_color_manual(
    values = c(`TRUE` = "black", `FALSE` = "grey")
  )
```

Qu'arrivera-t-il alors si une seule des ces dépendances change drastiquement, arrête de fonctionner ou disparaît tout simplement (@fig-xkcd-dependency) ? Pour réduire ce risque et sortir de cet enfer des dépendances :

* Évitez d'utiliser un package particulier quand la même tâche peut être réalisée en R basique : écrivez vos propres fonctions ! (@sec-rstats-functions-custom).
* Quand cela est possible, préférez les packages qui n'ont pas (ou peu) de dépendances.
* N'utilisez pas la version de développement d'un package, mais installez toujours la version stable depuis le CRAN.

```{r}
#| label: fig-xkcd-dependency
#| echo: false
#| out-width: '50%'
#| fig-cap: "Dependency. \"Someday ImageMagick will finally break for good and we'll have a long period of scrambling as we try to reassemble civilization from the rubble.\" [CC BY-NC 2.0 @munroe2020]."
knitr::include_graphics(here::here("images/xkcd_dependency.png"))
```

Le tableau n'est cependant pas totalement noir. Les packages publiés sur le CRAN doivent se conformer à des règles strictes et sont continuellement testés dans différentes configurations (systèmes d'exploitation et versions de R), obligeant les développeurs à réagir rapidement lorsqu'un bug est observé. De plus, lorsqu'un package n'est plus disponible sur le CRAN, les versions antérieures sont archivées et restent disponibles au téléchargement. Enfin, des initiatives comme [rOpenSci](https://ropensci.org/) œuvrent pour garantir un écosystème fonctionnel, en favorisant l'évaluation et la maintenance des packages.

## Obtenir de l'aide {#sec-rstats-help}
### Utiliser la documentation

La maîtrise d'une langue étrangère comme l'allemand ou le chinois demande du temps, de la pratique et des hauts et des bas. L'apprentissage d'un langage de programmation comme R est un processus similaire, et vous devez vous attendre à des hauts et des bas à mesure que R devient un élément de plus en plus central de votre flux de travail. R est fourni avec une documentation intégrée très complète, très structurée et contenant très souvent des exemples de code que vous pouvez exécuter pour explorer le fonctionnement d'une fonction.

```{r, echo=FALSE}
base_pkg <- getOption('defaultPackages')
names(base_pkg) <- base_pkg

n_base_pkg <- vapply(
  X = base_pkg,
  FUN = function(pkg) length(ls(paste0('package:', pkg))),
  FUN.VALUE = numeric(1)
)
```

Lorsque vous ne savez pas comment utiliser une fonction particulière (difficile de mémoriser les `r sum(n_base_pkg)` fonctions des packages de base), votre premier réflexe doit être de [consulter la documentation](https://fr.wikipedia.org/wiki/RTFM_(expression)). La documentation couvre l'ensemble des fonctions, jeux de données et autres objets présents dans les différents packages. 

Pour un objet donné, on peut consulter la documentation associée en utilisant soit la fonction `help()`, soit l'opérateur `?`. Par exemple, pour accéder à l'aide de la fonction `round()` :

```{r, eval=FALSE}
help(round)

?round
```

Si l'objet recherché appartient à un package qui n'est pas chargé, R ne saura pas où chercher la documentation. Dans l'exemple suivant, la fonction `lda()` appartient au package *MASS* : pour accéder à la documentation, il faudra alors charger le package au préalable ou le spécifier dans la fonction `help()` :

```{r, eval=FALSE}
help(lda, package = "MASS")

# OU

library(MASS)
help(lda)
```

Si on ignore le nom de la fonction à utiliser, deux approches permettent d'explorer la documentation :

* On peut parcourir la documentation d'un package particulier, dont on sait qu'il doit contenir la fonction recherchée (par exemple, `help(package = "MASS")` permet d'afficher le sommaire de la documentation du package *MASS*).
* On peut rechercher dans l'aide par mot-clé à l'aide de l'opérateur `??` ou de la fonction `help.search()`.

Par exemple, pour chercher toutes les pages de la documentation contenant le terme "correlation"^[Attention, la documentation est écrite en anglais. Pour chercher les pages de la documentation concernant les méthodes de régression linéaire il vous faudra utiliser `??"linear model"` (ou similaire).] :

```{r, eval=FALSE}
help.search("correlation")

??correlation
```

Toutes les pages d'aide sont structurées de la même façon. Généralement, on y trouve au moins les sections suivantes :

*Description*
: Une courte description de ce que fait la fonction.

*Usage*
: Un exemple d'utilisation de la fonction présentant l'ensemble des arguments et leurs éventuelles valeurs par défaut.

*Arguments*
: La liste des arguments de la fonction précisant leur nom, leur rôle et la valeur ou le type d'objet qui est attendu.

*Details*
: Une explication détaillée du comportement de la fonction.

*Value*
: Une description de ce qui est retourné lorsque la fonction est exécutée.

*References*
: Les références bibliographiques associées à la fonction.

*See Also*
: Une suggestion de fonctions similaires.

*Examples*
: Quelques exemples illustrant différents cas d'utilisation de la fonction. Ces exemples peuvent être exécutés directement avec la fonction `example()`.

Pour exécuter les exemples illustrant la documentation de la fonction `mean()` : 

```{r}
example(mean)
```

:::{.callout-tip}
Si vous faites face à une difficulté, il fort probable quelqu'un se soit déjà posé la même question que vous et que la réponse se trouve sur [Stack Overflow](https://stackoverflow.com/questions/tagged/r) ou sur les listes de diffusions [R-help](https://stat.ethz.ch/mailman/listinfo/r-help) et [R-devel](https://stat.ethz.ch/mailman/listinfo/r-devel) (actives depuis 1996). Dans le cas contraire, vous pourrez y exposer votre problème, mais il vous faudra apprendre à écrire des exemples reproductibles (@sec-rstats-reprex).
:::

### Écrire des exemples reproductibles {#sec-rstats-reprex}

Si vous souhaitez obtenir de l'aide en ligne auprès de la communauté des utilisateurs de R, sur [Stack Overflow](https://stackoverflow.com/questions)^[Avant de poster votre question sur Stack Overflow, prenez le temps de bien lire les [recommandations d'écriture](https://stackoverflow.com/help/how-to-ask).] ou sur les [listes de diffusion](https://www.r-project.org/mail.html), la seule description de votre difficulté ne sera pas suffisante. Vous devez permettre aux autres de reproduire le problème sur leur machine pour qu'ils puissent vous proposer une solution. Pour cela, inutile de diffuser l'intégralité de votre code et de vos données, préparez un exemple qui soit :

* Minimal : utilisez le moins de code possible tout en produisant le même problème.
* Complet : fournissez tous les éléments (version de R, packages utilisés, etc.) dont un tiers a besoin pour reproduire votre problème. Utilisez les données d'exemple de R.
* Reproductible : le code que vous vous apprêtez à fournir doit reproduire le problème.

Ces trois aspects sont détaillés dans l'[aide de Stack Overflow](https://stackoverflow.com/help/minimal-reproducible-example), il existe également une [question dédié](https://stackoverflow.com/questions/5963269/how-to-make-a-great-r-reproducible-example) à l'écriture d'un exemple reproductible ([*reprex*](https://twitter.com/romain_francois/status/530011023743655936)) avec R.

Comme le souligne @wickham2016, la plupart du temps, l'écriture d'un exemple reproductible vous permettra d'identifier et de résoudre vous-même le problème.

:::{.callout-tip}
L'utilisation du package [*reprex*](https://reprex.tidyverse.org/)^[Voir <https://reprex.tidyverse.org/articles/articles/learn-reprex.html>.] peut vous aider à écrire un exemple reproductible.
:::
