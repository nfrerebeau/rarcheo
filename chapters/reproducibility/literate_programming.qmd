# Programmation lettrée {#sec-reproducibility-literate}

Le principe de la programmation lettrée repose sur l'écriture de programmes informatiques dans un langage naturel (par exemple, le français ou l'anglais) au sein duquel s'intercalent des fragment de code (par exemple, écrit en R) [@schulte2012]. Ce paradigme a été introduit par Donald Knuth avec l'objectif de laisser les développeurs écrire en suivant le fil de leur pensée plutôt que la structuration imposé par l'ordinateur [@knuth1984; @knuth1992].

> Changeons notre attitude traditionnelle à l'égard de la construction de programmes : au lieu de considérer que notre tâche principale est de dire à un ordinateur ce qu'il doit faire, attachons-nous plutôt à expliquer aux êtres humains ce que nous voulons qu'un ordinateur fasse. --- @knuth1984

Le concept de programmation lettrée a évolué au fil du temps et a pris un sens légèrement différent au sein de la communauté R, qui pourrait être plus précisément appelé "analyse de données lettrée" ou "analyse statistique lettrée" [@schulte2012; @rossini2003; @koenker2009; @gentleman2007; @hoefling2014]. Ces nouveaux termes reflètent un changement d'orientation de la programmation lettrée, qui est passée de l'écriture de programmes informatiques à l'écriture scientifique. Bien que la terminologie soit variée, l'essence du concept est inchangée : le code est incorporé ou intercalé avec le texte en langage naturel qui demeure l'élément central.

La rédaction de documents de recherche à l'aide d'une méthode de programmation lettrée favorise la reproductibilité, car le lecteur peut voir les détails des méthodes analytiques utilisées pour calculer les statistiques, les tableaux et les graphiques de la publication. Il n'est pas nécessaire de copier et coller les résultats d'un programme à l'autre, car le code produit les résultats *in situ* à chaque fois que le document est rendu. Cela élimine les erreurs de copier-coller dans un traitement de texte, où le risque est d'omettre accidentellement certaines parties du texte qui doivent être mises à jour. Cette approche offre également un gain d'efficacité, car le code et le texte se trouvent au même endroit, ce qui simplifie grandement l'organisation de nos fichiers (@sec-collect). Il est ainsi plus facile de naviguer dans les répertoires de nos projets et de partager des fichiers avec des collaborateurs, car ils peuvent s'y retrouver plus rapidement.

Plusieurs options existent pour faire de la programmation lettrée avec R. La solution que nous recommandons repose sur le package *knitr* [@R-knitr] et le format texte brut *markdown*. Il est facile à apprendre, très bien documenté [@xie2015; @xie2021] et répond à toutes les exigences habituelles de l'écriture savante. Le format de fichier associé s'appelle [R Markdown](https://rmarkdown.rstudio.com/), il s'agit d'un fichier texte brut portant le suffixe `.Rmd` qui peut être rendu dans de nombreux format de sortie (traitement de texte, HTML, PDF...). La version rendue contient le texte formaté, les citations, les tableaux, les figures, etc., et peut être soumise à une revue ou partagée avec des collègues. Lors de la rédaction d'un fichier Rmd, vous disposez généralement de trois éléments clés : (1) les métadonnées du document (généralement une section en haut du document), (2) le texte en langage naturel de votre article ou rapport, et (3) les morceaux de code qui génèrent les graphiques, les tableaux et autres résultats qui apparaîtront dans le document rendu.
