# Structures de contrôle

```{r, echo=FALSE}
source(here::here("common.R"))
```

## Alternatives

Les alternatives permettent d'exécuter différentes instructions en fonction du résultat d'un test logique.

### Test "si..."

```{r}
#| label: fig-flow-if
#| echo: false
#| fig-cap: "Diagramme d'un test \"si...\""
#| fig-env: 'marginfigure'
DiagrammeR::grViz(
  'digraph {
  splines = ortho
  
  node [shape = diamond, fontname = arial, width = 1.25]
    T [label="test", group=g1]
  node [shape = box, fontname = arial, width = 1]
    A [label="instruction 1"]
    B [label="instruction 2", group=g1]
  node [shape = point, width = 0]
    d1 [group=g1]; d2 [group=g1]; d3 [group=g1]
  
  edge [minlen = 1, fontname = arial]
    d1 -> T
    T -> A [label="  oui"]
    A -> d2 -> B
    T -> d2 [arrowhead = none, label="  non"]
    B -> d3 [arrowhead = none]
  
  { rank = same; T; A }
  }',
  width = 200, height = 150
)
```

L'instruction `if` permet d'exécuter un bloc de code, uniquement *si* une condition est vraie (@fig-flow-if) :

```{r}
x <- 1

# On définit un test logique
# On encadre les instructions à exécuter avec des accolades
if (x > 0) {
  print("Texte affiché si la condition est vraie.")
}
```

### Test "si... sinon..."

```{r}
#| label: fig-flow-ifelse
#| echo: false
#| fig-cap: "Diagramme d'un test \"si... sinon...\""
#| fig-env: 'marginfigure'
DiagrammeR::grViz(
  'digraph {
  splines = ortho
  
  node [shape = diamond, fontname = arial, width = 1.25]
    T [label="test", group=g1]
  node [shape = box, fontname = arial, width = 1]
    A [label="instruction 1", group=g2]
    B [label="instruction 2", group=g3]
    C [label="instruction 3", group=g1]
  node [shape = point, width = 0]
    d1 [group=g1]; d2 [group=g1]; d3 [group=g1]
    d4 [group=g2]; d5 [group=g3]
    d6 [group=g2]; d7 [group=g3]
  
  edge [minlen = 1, fontname = arial]
    d1 -> T
    d4 -> T -> d5 [arrowhead = none]
    d4 -> A [label="  oui"]
    d5 -> B [label="  non"]
    A -> d6 [arrowhead = none]
    B -> d7 [arrowhead = none]
    d6 -> d2 -> d7 [arrowhead = none]
    d2 -> C
    C -> d3 [arrowhead = none]
  
  { rank = same; T; d4; d5 }
  { rank = same; A; B }
  { rank = same; d2; d6; d7 }
  }',
  width = 200, height = 200
)
```

Il est possible de définir plusieurs choix en utilisant alternativement les instructions `if` et `else` (@fig-flow-ifelse) :

```{r}
x <- 1

# On définit un test logique
if (x < 0) {
  print("Texte affiché si la condition est vraie.")
} else {
  print("Texte affiché si la condition est fausse.")
}
```

```{r}
#| label: fig-flow-elseif
#| echo: false
#| fig-cap: "Diagramme d'un test \"sinon... si...\""
#| fig-env: 'marginfigure'
DiagrammeR::grViz(
  'digraph {
  splines = ortho
  
  node [shape = diamond, fontname = arial, width = 1.25]
    T1 [label="test 1", group=g1]
    T2 [label="test 2", group=g1]
  node [shape = box, fontname = arial, width = 1]
    A [label="instruction 1", group=g2]
    B [label="instruction 2", group=g2]
    C [label="instruction 3", group=g1]
  node [shape = point, width = 0]
    d1 [group=g1]; d2 [group=g1]; d3 [group=g1];
    d4 [group=g3]; d5 [group=g3]; d6 [group=g3]
  
  edge [minlen = 1, fontname = arial]
    d1 -> T1
    T1 -> A [label="  oui"]
    T1 -> T2 [label="  non"]
    T2 -> B [label="  oui"]
    T2 -> d2 [arrowhead = none, label="  non"]
    d2 -> C
    A -> d4 -> d5 [arrowhead = none]
    B -> d5 -> d6 [arrowhead = none]
    d2 -> d6 [dir = back]
    C -> d3 [arrowhead = none]
  
  { rank = same; T1; A; d4 }
  { rank = same; T2; B; d5 }
  { rank = same; d2; d6 }
  }',
  width = 200, height = 200
)
```

Plusieurs alternatives peuvent être définies en utilisant conjointement `else` et `if`. On peut alors enchaîner autant de clauses "sinon si" que nécessaire et, éventuellement, définir une clause finale qui sera exécutée uniquement si aucune autre clause n'a été vérifiée (@fig-flow-elseif) :

```{r, message=TRUE}
x <- "chien"

if (x == "chat") {
  # Si la première condition est vraie
  message("x est un chat.")
} else if (x == "chien") {
  # Si la première condition est fausse et la seconde est vraie
  message("x est un chien.")
} else {
  # Si toutes les conditions sont fausses
  message("x est un animal inconnu.")
}
```

### Test "selon..."

L'instruction `switch` permet de choisir un bloc de code *selon* la valeur d'une variable.

L'exemple précédent peut être réécrit comme suit :

```{r, message=TRUE}
x <- "chien"

switch (
  x,
  chat = message("x est un chat."),
  chien = message("x est un chien."),
  message("x est un animal inconnu.")
)
```

## Boucles

Les boucles sont un moyen simple pour répéter des instructions en faisant varier un paramètre. 

### Boucles itératives

Une boucle itérative est contrôlée un compteur : une variable qui va prendre une valeur différente à chaque itération de la boucle. Le nombre d'exécutions de la boucle est connu à l'avance.

L'instruction `for` permet d'écrire des boucles en définissant un compteur et en spécifiant les instructions à répéter :

```{r}
# On définit une variable i (le nom est libre)
# On précise que i va prendre successivement les valeurs 1 à 5
# On encadre les instructions à répéter avec des accolades
for (i in 1:5) {
  print(i) # A chaque itération, on affiche la valeur de i
}
```

Dans l'exemple suivant, on cherche à extraire et à afficher successivement chaque élément d'un vecteur :

```{r}
# Création d'un vecteur contenant 5 éléments
x <- c(1.2, 6.5, 6.1, 5.9, 6.4)

# Faire varier i de 1 à 5
for (i in 1:5) {
  # Extraire la i-ème valeur de x
  # Stocker cette valeur dans l'objet k
  k <- x[i]
  # Afficher la valeur de k
  print(k)
}
```

Dans l'exemple précédent, la valeur de `k` a été remplacée à chaque itération de la boucle. Si on veut récupérer les résultats des différentes étapes, il va falloir au préalable créer un objet vide susceptible de recevoir progressivement les différentes valeurs. La définition de cet objet implique d'anticiper les résultats de la boucle pour qu'il ait la structure adéquate :

```{r}
# Créer un vecteur vide pour récupérer les résultats
# Le vecteur à la même longueur que le nombre d'itérations
k <- vector(mode = "numeric", length = 5)
k

# Faire varier i de 1 à 5
for (i in 1:5) {
  # Extraire la i-ème valeur de x
  # Affecter cette valeur à la i-ème position de k
  k[i] <- x[i]
}
k
```

Dans le cas d'un tableau à deux dimensions, écrire une même série d'instructions pour chaque ligne ou colonne individuellement peut rapidement s'avérer fastidieux. On peut ainsi mettre à profit les boucles pour n'écrire qu'une seule fois ces instructions et les appliquer à toutes les lignes ou toutes les colonnes.

Imaginons que l'on souhaite connaitre le nombre total de tessons de différents types de céramiques retrouvés sur un ensemble de sites archéologiques. Si nos données sont [correctement structurées](#data-tidy), on peut calculer cette somme pour chacune des colonnes d'un tableau de données^[Il s'agit d'un exemple : dans le cas présent une boucle n'est pas nécessaire, R possède deux fonctions qui permettent de calculer la somme des lignes (`rowSums()`) ou des colonnes (`colSums()`) d'un tableau.] :

```{r}
# On charge les données d'exemple
# help(compiegne, package = "folio")
data(compiegne, package = "folio")

# Le tableau possède 5 lignes et 16 colonnes
dim(compiegne)

# On crée un vecteur vide pour récupérer les résultats
# (16 valeurs sont attendues : la somme de chaque colonne)
resultats <- vector(mode = "numeric", length = 16)

# On fait varier i de 1 à 16
for (i in 1:16) {
  # On extrait la i-ème colonne
  colonne_i <- compiegne[, i]
  # On calcule la somme de la colonne
  total_i <- sum(colonne_i)
  # On stocke la somme dans la i-ème position du vecteur de résultats
  resultats[i] <- total_i
}
resultats
```

### Boucles de parcours

R possède une famille de fonctions qui permettent d'appliquer facilement des instructions aux différents éléments d'un objet. Les principales fonctions de cette famille sont :

* `apply()` : applique une fonction sur les lignes ou les colonnes d'une matrice (ou sur les dimensions supérieures d'un `array`).
* `lapply()` et `vapply()` : appliquent une fonction sur les différents éléments d'un vecteur ou d'une liste.
* `tapply()` : applique une fonction sur différents groupes de valeurs.

L'exemple précédent peut ainsi être simplifié avec `apply()` :

```{r}
# Inutile de créer un objet vide au préalable
somme <- apply(
  X = compiegne, 
  MARGIN = 2, # Appliquer aux lignes (1) ou aux colonnes (2)
  FUN = sum
)
somme
```

:::{.callout-warning}
La fonction `apply()` est conçue pour être utilisée sur une matrice (ou un `array`). Lorsqu'elle est utilisée sur un `data.frame`, elle va donc le convertir en `matrix`. Les éléments d'une matrice sont tous du même type : si les colonnes du `data.frame` sont de types différents, les règles de [conversions implicites](#conversion) s'appliquent et peuvent entraîner des erreurs (par exemple lorsque les colonnes numériques sont transformées en chaînes de caractères, empêchant ainsi l'exécution d'une fonction mathématique).
:::

Dans le cas d'un `data.frame`, il est préférable d'utiliser `lapply()` lorsqu'on souhaite appliquer une même fonction aux différentes colonnes :

```{r}
x <- data.frame(
  a = c(3.6, 7.5, 7.2, 7.7, 4.8),
  b = c(5.8, 7.5, 1.5, 5.7, 2.3),
  c = c(7.2, 6.4, 3.3, 3.1, 8.1)
)

# Convertir toutes les colonnes en integer
y <- lapply(X = x, FUN = as.integer)
y
```

`lapply()` retourne une simple liste, mais en utilisant une sélection vide, il est possible de conserver la structure du `data.frame` initial :
 
```{r}
# Convertir toutes les colonnes en integer
# Conserve la structure du data.frame
# (mais remplace les données d'origine)
x[] <- lapply(X = x, FUN = as.integer)
x
```

`vapply()` est similaire à `lapply()`, mais peut être plus pratique à utiliser. `vapply()` simplifie le résultat final et retourne un vecteur ou, si cela est approprié, une matrice (comme pour `apply()`, faites attention aux règles de [conversions implicites](#conversion)). De plus, le comportement de `vapply()` est prédictible : il est nécessaire de spécifier avec l'argument `FUN.VALUE` le type de résultat retourné.

```{r}
# On spécifie le résultat de l'application de FUN aux éléments de X
# Celui-ci doit être un vecteur de type integer et de longueur 5
z <- vapply(X = x, FUN = as.integer, FUN.VALUE = integer(5))
z
```

Si le résultat de l'application de la fonction `FUN` à chaque élément de `X` ne correspond pas à la spécification, l'exécution du code est interrompue et une erreur est retournée :

```{r, error=TRUE}
# La longueur du vecteur retourné par FUN ne correspond pas
vapply(X = x, FUN = as.integer, FUN.VALUE = integer(3))

# Le type du vecteur retourné par FUN ne correspond pas
vapply(X = x, FUN = as.integer, FUN.VALUE = character(5))
```

`tapply()` permet d'appliquer une même fonction à différents sous-ensembles d'un objet. Cette fonction est particulièrement pratique pour calculer des indicateurs statistiques par groupes :

```{r}
# On dispose de 5 mesures d'un paramètre quelconque
valeurs <- c(6.8, 6.4, 5.8, 8.5, 8.8)
# Chaque mesure appartient à un groupe particulier (A ou B)
groupes <- c("A", "A", "B", "A", "B")

# On calcule la moyenne de chaque groupe
moy <- tapply(X = valeurs, INDEX = groupes, FUN = mean)
moy
```

### Boucles à précondition

```{r}
#| label: fig-flow-while
#| echo: false
#| fig-cap: "Diagramme d'une boucle à précondition."
#| fig-env: 'marginfigure'
DiagrammeR::grViz(
  'digraph {
  splines = ortho
  
  node [shape = diamond, fontname = arial, width = 1.25]
    T [label="test", group=g1]
  node [shape = box, fontname = arial, width = 1]
    A [label="instruction 1", group=g1]
    B [label="instruction 2", group=g1]
  node [shape = point, width = 0]
    d1 [group=g1]; d2 [group=g1]; d4 [group=g1];
    d5 [group=g2]; d7 [group=g2]; d8 [group=g2];
    d3 [group=g3]; d6 [group=g3]
  
  edge [minlen = 1, fontname = arial]
    d6 -> d2 -> T
    d6 -> d3 -> A [arrowhead = none]
    d1 -> d2 [arrowhead = none]
    T -> A [label="  oui"]
    T -> d5 [arrowhead = none]
    d5 -> d7 [arrowhead = none, label="  non"] 
    d7 -> d8 [arrowhead = none]
    B -> d8 [dir = back]
    B -> d4 [arrowhead = none]
    
  { rank = same; T; d5 }
  { rank = same; A; d3; d7 }
  { rank = same; B; d8 }
  { rank = same; d2; d6 }
  
  }',
  width = 200, height = 200
)
```

Une dernière possibilité, d'un usage peut-être moins courant, consiste à exécuter des instructions tant qu'une condition est vérifié. Cette boucle peut être considérée comme la répétition d'une instruction `if` *tant que* la valeur d'un test est vraie. Ainsi, une condition est vérifiée avant chaque itération de la boucle : si la condition est vraie (`TRUE`) les instructions sont exécutées, si la condition est fausse (`FALSE`) la boucle s'arrête sans exécuter les instructions (@fig-flow-while).

```{r}
# On définit la valeur initiale d'une variable
i <- 0

# On répète les instructions tant que i est inférieur à 5
while (i < 5) {
  print(i)   # Afficher la valeur de i
  i <- i + 1 # Incrémenter la valeur i
}
```

:::{.callout-note}
Il convient d'être prudent avec l'usage de l'instruction `while`, car une mauvaise définition de la condition d'arrêt peut créer une boucle infinie.
:::
